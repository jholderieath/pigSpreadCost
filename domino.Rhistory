unique()%>%
filter(str_detect(name, "\\bEB_import."))%>%
mutate(rowname = substr(name,4,18))
b_imp <- left_join(b_imp,wt_imp)
b_imp$wtedshock <- b_imp$val * b_imp$weight
vws <- vw%>%
rename(weight = val)
b_sup_corn <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'corn\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_corn <- left_join(b_sup_corn,vws, by = 'rowname')
b_sup_corn$wtedshock <- b_sup_corn$val * b_sup_corn$weight
b_sup_soy <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'soy\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_soy <- left_join(b_sup_soy,vws, by = 'rowname')
b_sup_soy$wtedshock <- b_sup_soy$val * b_sup_soy$weight
b_sup_wheat <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'wheat\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_wheat <- left_join(b_sup_wheat,vws, by = 'rowname')
b_sup_wheat$wtedshock <- b_sup_wheat$val * b_sup_wheat$weight
b_sup_rice <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'rice\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_rice <- left_join(b_sup_rice,vws, by = 'rowname')
b_sup_rice$wtedshock <- b_sup_rice$val * b_sup_rice$weight
b_sup_peanut <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'peanut\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_peanut <- left_join(b_sup_peanut,vws, by = 'rowname')
b_sup_peanut$wtedshock <- b_sup_peanut$val * b_sup_peanut$weight
#combine into b mat------------------
shock <-
bind_rows(b_dom[1,5] + b_exp[1,5] + b_imp[1,5] + sum(b_sup_corn[,5]),
b_dom[2,5] + b_exp[2,5] + b_imp[2,5] + sum(b_sup_soy[,5]),
b_dom[3,5] + b_exp[3,5] + b_imp[3,5] + sum(b_sup_wheat[,5]),
b_dom[4,5] + b_exp[4,5] + b_imp[4,5] + sum(b_sup_rice[,5]),
b_dom[5,5] + b_exp[5,5] + b_imp[5,5] + sum(b_sup_peanut[,5]))%>%
as.matrix()
#solve for price changes------------------------------
solve(A,shock)
plot(cars)
summary(map_2020)
count(map_2020)
frequency(map_2020)
frequency(map_2020)
count(map_2020$value)
count(map_2020, 'value')
map_2020$value <- as.factor(map_2020$value)
county_choropleth(map_2020,
title = "2020 Predicted Wild Pig Presence",
legend = "Presence",
state_zoom = continental_us_states)
count(map_2020, 'value')
table(map_2020$value)
table(map_2028$value)
table(map_2020$value, map_2028$value, map_2036$value)
tibble(map_2020$value, map_2028$value, map_2036$value)
table(map_2020$value, map_2028$value, map_2036$value)
table(map_2020$value; map_2028$value; map_2036$value)
table(map_2020$value, map_2028$value, map_2036$value)
tabulate(map_2020$value, map_2028$value, map_2036$value)
tabulate(map_2020$value, map_2028$value)
tabulate(map_2020$value)
data(continental_us_states)
map_2020 <- Presence %>%
select(GEOID,Id_2020)%>%
rename(region = GEOID, value = Id_2020)
map_2020$region <- as.numeric(map_2020$region)
map_2020$value <- as.factor(map_2020$value)
county_choropleth(map_2020,
title = "2020 Predicted Wild Pig Presence",
legend = "Presence",
state_zoom = continental_us_states)
table()
data(continental_us_states)
map_2020 <- Presence %>%
select(GEOID,Id_2020)%>%
rename(region = GEOID, value = Id_2020)
map_2020$region <- as.numeric(map_2020$region)
map_2020$value <- as.factor(map_2020$value)
county_choropleth(map_2020,
title = "2020 Predicted Wild Pig Presence",
legend = "Presence",
state_zoom = continental_us_states)
map_2028 <- Presence %>%
select(GEOID,Id_2028)%>%
rename(region = GEOID, value = Id_2028)
map_2028$region <- as.numeric(map_2028$region)
county_choropleth(map_2028,
title = "2028 Predicted Wild Pig Presence",
legend = "Presence",
state_zoom = continental_us_states)
map_2036 <- Presence %>%
select(GEOID,Id_2036)%>%
rename(region = GEOID, value = Id_2036)
map_2036$region <- as.numeric(map_2036$region)
county_choropleth(map_2036,
title = "2036 Predicted Wild Pig Presence",
legend = "Presence",
state_zoom = continental_us_states)
tabulate(map_2020$value)
tabulate(map_2028$value)
tabulate(map_2036$value)
data(continental_us_states)
map_2020 <- Presence %>%
select(GEOID,Id_2020)%>%
rename(region = GEOID, value = Id_2020)
map_2020$region <- as.numeric(map_2020$region)
map_2020$value <- as.factor(map_2020$value)
county_choropleth(map_2020,
title = "2020 Predicted Wild Pig Presence",
legend = "Presence",
state_zoom = continental_us_states)
map_2028 <- Presence %>%
select(GEOID,Id_2028)%>%
rename(region = GEOID, value = Id_2028)
map_2028$region <- as.numeric(map_2028$region)
county_choropleth(map_2028,
title = "2028 Predicted Wild Pig Presence",
legend = "Presence",
state_zoom = continental_us_states)
map_2036 <- Presence %>%
select(GEOID,Id_2036)%>%
rename(region = GEOID, value = Id_2036)
map_2036$region <- as.numeric(map_2036$region)
county_choropleth(map_2036,
title = "2036 Predicted Wild Pig Presence",
legend = "Presence",
state_zoom = continental_us_states)
tabulate(map_2020$value)
tabulate(map_2028$value)
tabulate(map_2036$value)
# build dfs for price change calculations--------------
crops <- c("corn","soy","wheat",'rice','peanut')
markets <- c("domestic","export")
s <- Presence[,'GEOID']
suppliers <- unique(c("imports",unlist(s)))
variables <- gen_var(crops,markets,suppliers)
EB <- gen_shock(crops, place=suppliers, side = "B")
EC <- gen_shock(crops, place=markets, side = "C")
# load elasticities
source('elast.R')
# consumption shocks-----------
ECL <- tibble(EC) %>%
rename(name = EC) %>%
add_column(val = 0)
rm(EC)
# production shocks -----------
#The shocks are on the production side of the equilibrium conditions.
EBL <- tibble(EB) %>%
rename(name = EB)%>%
add_column(val = c(0,Presence[,'EB_corn_2020', drop = TRUE],
0,Presence[,'EB_soy_2020', drop = TRUE],
0,Presence[,'EB_wheat_2020', drop = TRUE],
0,Presence[,'EB_rice_2020', drop = TRUE],
0,Presence[,'EB_peanuts_2020', drop = TRUE]))
# assemble variables for domestic, import, and exports -------------
v <-  variables%>%
unlist()%>%
str_subset("\\b[^EP]{0,2}_domestic|export|imports.")%>%
as.tibble()%>%
rename(name = value)
v$val <- val_look_up(v$name)
v <- rbind(v,ECL)%>%
rbind(EBL)
# supply elasticities----------------
ve <- variables %>%
unlist()%>%
str_subset("\\b[e]_[:digit:]{5}.")%>%
as.tibble()%>%
rename(name = value)
ve$reg<- ve$name %>%
str_replace_all("\\b[e]_(20|31)[:digit:]{3}.","e_Central_Plains_")%>%
str_replace_all("\\b[e]_(17|18|19|29|39)[:digit:]{3}.","e_Corn_Belt_")%>%
str_replace_all("\\b[e]_(05|22|28)[:digit:]{3}.","e_Delta_States_")%>%
str_replace_all("\\b[e]_(04|06|08|16|30|32|35|41|49|53|56)[:digit:]{3}.","e_Far_West_")%>%
str_replace_all("\\b[e]_(26|27|55)[:digit:]{3}.","e_Lake_States_")%>%
str_replace_all("\\b[e]_(09|10|11|23|24|25|33|34|36|42|44|50|54)[:digit:]{3}.","e_Northeast_")%>%
str_replace_all("\\b[e]_(38|46)[:digit:]{3}.","e_Northern_Plains_")%>%
str_replace_all("\\b[e]_(01|12|13|21|37|45|47|51)[:digit:]{3}.","e_Southeast_")%>%
str_replace_all("\\b[e]_(40|48)[:digit:]{3}.","e_Southern_Plains_")
temp <-   paste0(
str_extract(ve$reg,'\\b[e]_'),
str_extract(ve$reg,'(Central_Plains|Corn_Belt|Delta_States|Far_West|Lake_States|Northeast|Northern_Plains|Southeast|Southern_Plains)'),"['",
str_extract(ve$reg,'(corn|soy|wheat|rice|peanut){1}'),"','",
str_extract(ve$reg,'(corn|soy|wheat|rice|peanut)\\b'),"']"
)
ve$val <-  purrr::map_dbl(temp, eval_parse)
#ve$val <-  purrr::map_dbl(ve$reg, eval_parse)
v <- rbind(v,ve[,c('name','val')])
#supply weights------------
Total_Corn_Supply <- 16942000000
Total_Soy_Supply <-  4719000000
Total_Wheat_Supply <- 3079000000
Total_Rice_Supply <- 249170000
Total_Peanut_Supply <- 8800000000
Presence$ss__corn <- Presence$p_corn_2012/Total_Corn_Supply
Presence$ss__soy <- Presence$p_soy_2012/Total_Soy_Supply
Presence$ss__wheat <- Presence$p_wheat_2012/Total_Wheat_Supply
Presence$ss__rice <- Presence$p_rice_2012/Total_Rice_Supply
Presence$ss__peanut <- Presence$p_peanuts_2012/Total_Peanut_Supply
vw <-  variables %>%
unlist() %>%
str_subset("\\b[ss_]") %>%
as.tibble() %>%
rename(name = value)
#filter out imports
vw <- vw %>%
filter(str_detect(name, "imports") == FALSE)
Presence$ss__corn <- replace_na(Presence$ss__corn,0)
Presence$ss__soy <- replace_na(Presence$ss__soy,0)
Presence$ss__wheat <- replace_na(Presence$ss__wheat,0)
Presence$ss__rice <- replace_na(Presence$ss__rice,0)
Presence$ss__peanut <- replace_na(Presence$ss__peanut,0)
tmp_Pres <- Presence %>%
select(GEOID,ss__corn,ss__soy,ss__wheat,ss__rice,ss__peanut)
names <- vw$name
result <- list()
x <- paste0("ss__",str_extract(names,'(corn|soy|wheat|rice|peanut){1}'))
y <- str_extract(names,"[:digit:]{5}")
result <- map2_dbl(x,y,ssLookup,data=tmp_Pres)
vw <- vw %>%
add_column(result)
vw<-  vw %>% rename(val = result, rowname = name)%>%
mutate(rowname = substr(rowname,4,19))
rm(Total_Corn_Supply,Total_Soy_Supply,Total_Wheat_Supply,
Total_Rice_Supply,Total_Peanut_Supply,tmp_Pres,names,x,y,result)
##==========================================================
# shock df, this is duplicate at this point. the shock df to matrix is below. this is just
# for the names
b <- ECL %>%
unique()%>%
filter(str_detect(name, "\\bEC_domestic."))%>%
rbind(ECL %>%
filter(str_detect(name, "\\bEC_export.")))%>%
rbind(EBL %>%
filter(str_detect(name, "\\bEB_import.")))%>%
rbind(EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}.")))%>%
mutate(rowname = substr(name,4,18))
# rownames------------
rn <- b$rowname
#elasticity df-------------
A1 <- as.tibble(e_domestic) %>%
mutate(rowname = str_subset(rn,"\\bdomestic."))
A2 <- as.tibble(e_export) %>%
mutate(rowname = str_subset(rn,"\\bexport."))
A3 <- as.tibble(e_imports) %>%
mutate(rowname = str_subset(rn,"\\bimport."))
vrn <- v%>%
column_to_rownames(var = 'name')
rm(e_domestic,e_export,e_imports)
## supply elasticities----------------
A4_corn <- as.tibble(ve %>%
filter(str_detect(name, "corn_corn$"))%>%
select(val) %>%
as_vector()) %>%
add_column(soy = ve %>%
filter(str_detect(name, "soy_corn$"))%>%
select(val) %>%
as_vector())%>%
add_column(wheat = ve %>%
filter(str_detect(name, "wheat_corn$"))%>%
select(val) %>%
as_vector())%>%
add_column(rice = ve %>%
filter(str_detect(name, "rice_corn$"))%>%
select(val) %>%
as_vector())%>%
add_column(peanut = ve %>%
filter(str_detect(name, "peanut_corn$"))%>%
select(val) %>%
as_vector()) %>%
rename(corn = value)%>%
mutate(rowname = str_subset(rn,"\\b[:digit:]{5}.corn$"))
A4_soy <- as.tibble(ve %>%
filter(str_detect(name, "corn_soy$"))%>%
select(val) %>%
as_vector()) %>%
add_column(soy = ve %>%
filter(str_detect(name, "soy_soy$"))%>%
select(val) %>%
as_vector())%>%
add_column(wheat = ve %>%
filter(str_detect(name, "wheat_soy$"))%>%
select(val) %>%
as_vector())%>%
add_column(rice = ve %>%
filter(str_detect(name, "rice_soy$"))%>%
select(val) %>%
as_vector())%>%
add_column(peanut = ve %>%
filter(str_detect(name, "peanut_soy$"))%>%
select(val) %>%
as_vector()) %>%
rename(corn = value)%>%
mutate(rowname = str_subset(rn,"\\b[:digit:]{5}.soy$"))
A4_wheat <- as.tibble(ve %>%
filter(str_detect(name, "corn_wheat$"))%>%
select(val) %>%
as_vector()) %>%
add_column(soy = ve %>%
filter(str_detect(name, "soy_wheat$"))%>%
select(val) %>%
as_vector())%>%
add_column(wheat = ve %>%
filter(str_detect(name, "wheat_wheat$"))%>%
select(val) %>%
as_vector())%>%
add_column(rice = ve %>%
filter(str_detect(name, "rice_wheat$"))%>%
select(val) %>%
as_vector())%>%
add_column(peanut = ve %>%
filter(str_detect(name, "peanut_wheat$"))%>%
select(val) %>%
as_vector()) %>%
rename(corn = value)%>%
mutate(rowname = str_subset(rn,"\\b[:digit:]{5}.wheat$"))
A4_rice <- as.tibble(ve %>%
filter(str_detect(name, "corn_rice$"))%>%
select(val) %>%
as_vector()) %>%
add_column(soy = ve %>%
filter(str_detect(name, "soy_rice$"))%>%
select(val) %>%
as_vector())%>%
add_column(wheat = ve %>%
filter(str_detect(name, "wheat_rice$"))%>%
select(val) %>%
as_vector())%>%
add_column(rice = ve %>%
filter(str_detect(name, "rice_rice$"))%>%
select(val) %>%
as_vector())%>%
add_column(peanut = ve %>%
filter(str_detect(name, "peanut_rice$"))%>%
select(val) %>%
as_vector()) %>%
rename(corn = value)%>%
mutate(rowname = str_subset(rn,"\\b[:digit:]{5}.rice$"))
A4_peanut <- as.tibble(ve %>%
filter(str_detect(name, "corn_peanut$"))%>%
select(val) %>%
as_vector()) %>%
add_column(soy = ve %>%
filter(str_detect(name, "soy_peanut$"))%>%
select(val) %>%
as_vector())%>%
add_column(wheat = ve %>%
filter(str_detect(name, "wheat_peanut$"))%>%
select(val) %>%
as_vector())%>%
add_column(rice = ve %>%
filter(str_detect(name, "rice_peanut$"))%>%
select(val) %>%
as_vector())%>%
add_column(peanut = ve %>%
filter(str_detect(name, "peanut_peanut$"))%>%
select(val) %>%
as_vector()) %>%
rename(corn = value)%>%
mutate(rowname = str_subset(rn,"\\b[:digit:]{5}.peanut$"))
# unweighted supply A df------------
A_dom_supply <-  bind_rows(list(A4_corn,A4_soy,A4_wheat,A4_rice,A4_peanut))
#domestic demand---------------------------
wt_dom <- tibble(rowname = c("domestic_corn", "domestic_soy", "domestic_wheat", "domestic_rice", "domestic_peanut"),
val = diag(w_domestic))%>%
rename(weight = val)
dom <- left_join(wt_dom,A1, by = "rowname")
dom <- dom[['weight']] * dom[-(1:2)]#multiply elasticities by weight
#export demand-------------------------------
wt_exp <- tibble(rowname = c("export_corn", "export_soy", "export_wheat", "export_rice", "export_peanut"),
val = diag(w_export))%>%
rename(weight = val)
exp <-  left_join(wt_exp,A2, by = "rowname")
exp <- exp[['weight']] * exp[-(1:2)]#multiply elasticities by weight
#import supply---------------------------
wt_imp <- tibble(rowname = c("imports_corn", "imports_soy", "imports_wheat", "imports_rice", "imports_peanut"),
val = diag(ss_imports))%>%
rename(weight = val)
imp <- left_join(wt_imp,A3, by = "rowname")
imp$weight <- -1 * imp$weight #move import supply to left side of equal sign
imp <- imp[['weight']] * imp[-(1:2)]#multiply elasticities by weight
#domestic supply -----------------------------------
sup_corn <- left_join(A4_corn,vw, by = "rowname")%>%
rename(weight = val)
sup_corn$weight <- -1 * sup_corn$weight #move domestic supply to left side of equal sign
sup_corn <- sup_corn[['weight']] * sup_corn[(1:5)]#multiply elasticities by weight
sup_corn <- summarise_all(sup_corn,sum)
sup_soy <- left_join(A4_soy,vw, by = "rowname")%>%
rename(weight = val)
sup_soy$weight <- -1 * sup_soy$weight #move domestic supply to left side of equal sign
sup_soy <- sup_soy[['weight']] * sup_soy[(1:5)]#multiply elasticities by weight
sup_soy <- summarise_all(sup_soy,sum)
sup_wheat <- left_join(A4_wheat,vw, by = "rowname")%>%
rename(weight = val)
sup_wheat$weight <- -1 * sup_wheat$weight #move domestic supply to left side of equal sign
sup_wheat <- sup_wheat[['weight']] * sup_wheat[(1:5)]#multiply elasticities by weight
sup_wheat <- summarise_all(sup_wheat,sum)
sup_rice <- left_join(A4_rice,vw, by = "rowname")%>%
rename(weight = val)
sup_rice$weight <- -1 * sup_rice$weight #move domestic supply to left side of equal sign
sup_rice <- sup_rice[['weight']] * sup_rice[(1:5)]#multiply elasticities by weight
sup_rice <- summarise_all(sup_rice,sum)
sup_peanut <- left_join(A4_peanut,vw, by = "rowname")%>%
rename(weight = val)
sup_peanut$weight <- -1 * sup_peanut$weight #move domestic supply to left side of equal sign
sup_peanut <- sup_peanut[['weight']] * sup_peanut[(1:5)]#multiply elasticities by weight
sup_peanut <- summarise_all(sup_peanut,sum)
#combine into A mat------------------
A_s_corn <- dom[1,] + exp[1,] + imp[1,] + sup_corn
A_s_soy <- dom[2,] + exp[2,] + imp[2,] + sup_soy
A_s_wheat  <- dom[3,] + exp[3,] + imp[3,] + sup_wheat
A_s_rice <- dom[4,] + exp[4,] + imp[4,] + sup_rice
A_s_peanut <- dom[5,] + exp[5,] + imp[5,] + sup_peanut
A <- bind_rows(A_s_corn,
A_s_soy,
A_s_wheat,
A_s_rice,
A_s_peanut
)%>%
as.matrix()
# create the shock matrix
b_dom <- ECL %>%
unique()%>%
filter(str_detect(name, "\\bEC_domestic."))%>%
mutate(rowname = substr(name,4,18))
neg_wt_dom <- wt_dom
neg_wt_dom$weight <- -1 * neg_wt_dom$weight
b_dom <- left_join(b_dom,neg_wt_dom, by = 'rowname')
b_dom$wtedshock <- b_dom$val * b_dom$weight
b_exp <- ECL %>%
unique()%>%
filter(str_detect(name, "\\bEC_export."))%>%
mutate(rowname = substr(name,4,18))
neg_wt_exp <- wt_exp
neg_wt_exp$weight <- -1 * neg_wt_exp$weight
b_exp <- left_join(b_exp,neg_wt_exp, by = 'rowname')
b_exp$wtedshock <- b_exp$val * b_exp$weight
b_imp <- EBL %>%
unique()%>%
filter(str_detect(name, "\\bEB_import."))%>%
mutate(rowname = substr(name,4,18))
b_imp <- left_join(b_imp,wt_imp)
b_imp$wtedshock <- b_imp$val * b_imp$weight
vws <- vw%>%
rename(weight = val)
b_sup_corn <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'corn\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_corn <- left_join(b_sup_corn,vws, by = 'rowname')
b_sup_corn$wtedshock <- b_sup_corn$val * b_sup_corn$weight
b_sup_soy <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'soy\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_soy <- left_join(b_sup_soy,vws, by = 'rowname')
b_sup_soy$wtedshock <- b_sup_soy$val * b_sup_soy$weight
b_sup_wheat <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'wheat\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_wheat <- left_join(b_sup_wheat,vws, by = 'rowname')
b_sup_wheat$wtedshock <- b_sup_wheat$val * b_sup_wheat$weight
b_sup_rice <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'rice\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_rice <- left_join(b_sup_rice,vws, by = 'rowname')
b_sup_rice$wtedshock <- b_sup_rice$val * b_sup_rice$weight
b_sup_peanut <- EBL %>%
filter(str_detect(name, "\\bEB_[:digit:]{5}."))%>%
filter(str_detect(name, 'peanut\\b'))%>%
mutate(rowname = substr(name,4,18))
b_sup_peanut <- left_join(b_sup_peanut,vws, by = 'rowname')
b_sup_peanut$wtedshock <- b_sup_peanut$val * b_sup_peanut$weight
#combine into b mat------------------
shock <-
bind_rows(b_dom[1,5] + b_exp[1,5] + b_imp[1,5] + sum(b_sup_corn[,5]),
b_dom[2,5] + b_exp[2,5] + b_imp[2,5] + sum(b_sup_soy[,5]),
b_dom[3,5] + b_exp[3,5] + b_imp[3,5] + sum(b_sup_wheat[,5]),
b_dom[4,5] + b_exp[4,5] + b_imp[4,5] + sum(b_sup_rice[,5]),
b_dom[5,5] + b_exp[5,5] + b_imp[5,5] + sum(b_sup_peanut[,5]))%>%
as.matrix()
#solve for price changes------------------------------
solve(A,shock)
plot(cars)
View(AbstractballparkS4)
AbstractballparkS4
install.packages("triangle")
library(triangle)
#2020
Presence$draw_corn_2020 <- rtriangle(nrow(Presence),
a=min(AbstractballparkS4$Corn),
b=max(AbstractballparkS4$Corn),                                   c=(min(AbstractballparkS4$Corn)+AbstractballparkS4$Corn)/2)
rtriangle(nrow(Presence),
a=min(AbstractballparkS4$Corn),
b=max(AbstractballparkS4$Corn),                                   c=(min(AbstractballparkS4$Corn)+AbstractballparkS4$Corn)/2)
#2020
Presence$draw_corn_2020 <- rtriangle(nrow(Presence),
a=min(AbstractballparkS4$Corn),
b=max(AbstractballparkS4$Corn),                                   c=(min(AbstractballparkS4$Corn)+AbstractballparkS4$Corn)/2)
Presence$EB_corn_2020 <- -1 * Presence$draw_corn_2020 * Presence$Id_2020
